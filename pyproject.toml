# devhelpers - A Development Toolbox
# Copyright (C) 2021  Michael Sasser <Michael@MichaelSasser.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[tool.poetry]
name = "devhelpers"
version = "0.1.2"
description = "A Development Toolbox"
license = "GPL-3.0-or-later"
authors = ["Michael Sasser <Michael@MichaelSasser.org>"]
maintainers = ["Michael Sasser <Michael@MichaelSasser.org>"]
readme = "README.md"
repository = "https://github.com/MichaelSasser/devhelpers"
homepage = "https://github.com/MichaelSasser/devhelpers"
documentation = "https://michaelsasser.github.io/devhelpers/index.html"
keywords = ['devtools', 'development', 'tools']
# Look here for all Classifiers:
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
  # 'Development Status :: 3 - Alpha',
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Typing :: Typed",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.group.docs.dependencies]
sphinx = "^6.1.3"
sphinx-autodoc-typehints = "^1.22"
sphinxcontrib-programoutput = "^0.17"
numpydoc = "^1.5.0"
sphinx_rtd_theme = "^1.2.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.2.1"
pytest = "^7.2.2"
pytest-cov = "^4.0.0"
pytest-xdist = { version = "^3.2.1", extras = ["psutil"] }
flake8 = "^6.0.0"
pydocstyle = "^6.3.0"
pylint = "^2.17.1"
pycodestyle = "^2.10.0"
yapf = "^0.32.0"
vulture = "^2.7"
mypy = "^1.1.1"
interrogate = "^1.5.0"
towncrier = "^22.12.0"
tox = "^4.4.8"
isort = { version = "^5.12.0", extras = ["pyproject"] }
black = { version = "^23.1.0", allow-prereleases = true }
flake8-bugbear = "^23.3.23"

# typesheds
types-pkg-resources = "^0.1.3"


[tool.black]
line-length = 79
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/setup.py
)/
'''

[tool.flake8]
max-line-length = 79
# max-complexity = 12
ignore = "E501"
select = "C,E,F,W,B,B901"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
# ignore-semiprivate = false
# ignore-private = false
# ignore-property-decorators = false
# ignore-module = false
fail-under = 1                          # TODO: Docs
exclude = ["setup.py", "docs", "build"]
# ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 1
# quiet = false
# whitelist-regex = []
# color = true

[tool.mypy]
python_version = 3.9
platform = "linux"
ignore_missing_imports = true
strict_equality = true
strict = true
show_traceback = true

# [[tool.mypy.overrides]]
# module = "tests.*"
# allow_untyped_decorators = true  # pytest fixtures

[tool.isort]
line_length = 79
force_single_line = true
atomic = true
float_to_top = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
multi_line_output = 3
use_parentheses = true
skip_glob = [
  "docs/source/conf.py",
  "*/setup.py",
  "*.rst",
  "*.md",
  "*.yaml",
  "*.txt",
  "*.yml",
  "*.lock",
  "*.toml",
  "*.ini",
  "Makefile",
]
filter_files = true
known_first_party = "devhelpers"
known_third_party = ["pytest"]

[tool.vulture]
make_whitelist = true
min_confidence = 80
paths = ["devhelpers"]
sort_by_size = true

[tool.towncrier]
package = "devhelpers"
package_dir = "devhelpers"
filename = "CHANGELOG.rst"
issue_format = "`#{issue} <https://github.com/MichaelSasser/devhelpers/issues/{issue}>`_"
directory = "news/"
top_line = false
title_format = "{version} ({project_date})"                                               # {name}
all_bullets = true                                                                        # make all fragments bullet points
wrap = true                                                                               # Wrap text to 79 characters
template = "news/templates/default.rst"

[[tool.towncrier.type]]
directory = "breaking"
name = "Behavior & Breaking Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features & Improvements"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bugfixes"
showcontent = true

[[tool.towncrier.type]]
directory = "docs"
name = "Improved Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "removal"
name = "Removals & Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "trivial"
name = "Trivial Changes"
showcontent = false

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellaneous"
showcontent = true


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.tox]
legacy_tox_ini = """
[pytest]

addopts = -ra
testpaths = tests
xfail_strict = true
filterwarnings =
    once::Warning
    ignore:::pympler[.*]


# Keep docs in sync with docs env and .readthedocs.yml.
# [gh-actions]
# python =
#     3.11: py31q, precommit, changelog, docs


[tox]
envlist = precommit,py311,docs,changelog,
# py311,
isolated_build = True


[testenv]
allowlist_externals = poetry
# Prevent random setuptools/pip breakages like
# https://github.com/pypa/setuptools/issues/1042 from breaking our builds.
setenv =
    VIRTUALENV_NO_DOWNLOAD=1
extras = {env:TOX_AP_TEST_EXTRAS:tests}
commands = poetry run pytest {posargs}


[testenv:py311]
allowlist_externals = poetry
# Python 3.6+ has a number of compile-time warnings on invalid string escapes.
# PYTHONWARNINGS=d and --no-compile below make them visible during the Tox run.
basepython = python3.11
install_command = pip install --no-compile {opts} {packages}
setenv =
    PYTHONWARNINGS=d
extras = {env:TOX_AP_TEST_EXTRAS:tests}
commands = poetry run coverage run -m pytest {posargs}


[testenv:precommit]
allowlist_externals = poetry
basepython = python3.11
skip_install = true
deps =
    pre-commit
passenv = HOMEPATH  # needed on Windows
commands =
    poetry run pre-commit run --all-files --show-diff-on-failure


[testenv:docs]
allowlist_externals = poetry
# Keep basepython in sync with gh-actions and .readthedocs.yml.
basepython = python3.11
# extras = docs, func
# currently disable -n
commands =
  poetry install --with docs -v
  poetry run sphinx-build -T -W -b html -d {envtmpdir}/doctrees docs/source docs/build/html


[testenv:changelog]
allowlist_externals = poetry
basepython = python3.11
# deps = towncrier
skip_install = true
commands = poetry run towncrier --draft
"""
